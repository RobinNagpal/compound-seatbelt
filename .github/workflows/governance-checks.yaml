name: Governance Checks

on:
  schedule:
    - cron: '0 */2 * * *'
  push:
    branches:
      - main

jobs:
  check-proposals:
    strategy:
      # Set fail-fast to false to ensure all Matrix runs complete even if one fails.
      fail-fast: false
      matrix:
        include:
          - DAO_NAME: 'Compound'
            GOVERNOR_ADDRESS: '0xc0Da02939E1441F497fd74F78cE7Decb17B66529'

    name: Check all live proposals
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install solc-select
        run: pip3 install solc-select

      - name: Install Slither
        run: pip3 install slither-analyzer

      - name: Run checks
        run: yarn start
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RPC_URL: ${{ secrets.RPC_URL }}
          TENDERLY_ACCESS_TOKEN: ${{ secrets.TENDERLY_ACCESS_TOKEN }}
          TENDERLY_USER: ${{ secrets.TENDERLY_USER }}
          TENDERLY_PROJECT_SLUG: ${{ secrets.TENDERLY_PROJECT_SLUG }}
          DAO_NAME: ${{ matrix.DAO_NAME }}
          GOVERNOR_ADDRESS: ${{ matrix.GOVERNOR_ADDRESS }}
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
          POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}
          ARBITRUMSCAN_API_KEY: ${{ secrets.ARBITRUMSCAN_API_KEY }}
          SCROLL_API_KEY: ${{ secrets.SCROLL_API_KEY }}
          OPTIMISM_API_KEY: ${{ secrets.OPTIMISM_API_KEY }}
          RPC_URL_MAINNET: ${{ secrets.RPC_URL_MAINNET }}
          RPC_URL_POLYGON: ${{ secrets.RPC_URL_POLYGON }}
          RPC_URL_BASE: ${{ secrets.RPC_URL_BASE }}
          RPC_URL_ARBITRUM: ${{ secrets.RPC_URL_ARBITRUM }}
          RPC_URL_SCROLL: ${{ secrets.RPC_URL_SCROLL }}
          RPC_URL_OPTIMISM: ${{ secrets.RPC_URL_OPTIMISM }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}


      - name: Upload artifacts
        # We always upload artifacts, even if certain proposal sims/checks failed. This is because
        # we don't want to block generating all reports for all DAOs when a single one fails.
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.DAO_NAME }}
          path: reports/${{ matrix.DAO_NAME }}/${{ matrix.GOVERNOR_ADDRESS }}/
